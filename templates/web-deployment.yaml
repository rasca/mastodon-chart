apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "web.fullname" . }}
  labels:
    app: {{ template "name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: "web"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "name" . }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "name" . }}
        component: "web"
        release: {{ .Release.Name }}
    spec:
      containers:
      - name: sidekiq
        image: "{{ .Values.sidekiq.image }}:{{ .Values.sidekiq.imageTag }}"
        imagePullPolicy: {{ .Values.sidekiq.imagePullPolicy | quote }}
        command:
          - bundle
          - exec
          - sidekiq
          - -c
          - "{{ .Values.sidekiq.parallelism }}"
          - -q
          - default
          - -q
          - mailers
          - -q
          - pull
          - -q
          - push
          - -q
          - scheduler
        envFrom:
          - configMapRef:
              name: {{ include "fullname" . }}-env
          - secretRef:
              name: {{ include "fullname" . }}-web
        resources:
{{ toYaml .Values.sidekiq.resources | indent 10 }}
        volumeMounts:
        - name: assets
          mountPath: /opt/mastodon/public/assets
        - name: system
          mountPath: /opt/mastodon/public/system
      - name: web
        image: "{{ .Values.web.image }}:{{ .Values.web.imageTag }}"
        imagePullPolicy: {{ .Values.web.imagePullPolicy | quote }}
        command:
          - bundle
          - exec
          - puma
          - -C
          - config/puma.rb
        envFrom:
          - configMapRef:
              name: {{ include "fullname" . }}-env
          - secretRef:
              name: {{ include "fullname" . }}-web
        env:
        - name: "PORT"
          value: {{ .Values.web.containerPort | quote }}
        {{- if .Values.externalPostgresql.existingSecret }}
        - name: "DB_PASS"
          valueFrom:
            secretKeyRef:
              key: {{ .Values.externalPostgresql.existingSecretPasswordKey | quote }}
              name: {{ .Values.externalPostgresql.existingSecret | quote }}
        {{- end }}
        {{- if not .Values.redis.enabled }}
        {{- if .Values.externalRedis.existingSecret }}
        - name: "REDIS_URL"
          valueFrom:
            secretKeyRef:
              key: {{ .Values.externalRedis.existingSecretUrlKey | quote }}
              name: {{ .Values.externalRedis.existingSecret | quote }}
        {{- else }}
        - name: "REDIS_URL"
          value: {{ .Values.externalRedis.url | quote }}
        {{- end }}
        {{- end }}
        ports:
        - name: http
          containerPort: {{ .Values.web.containerPort }}
          protocol: TCP
        livenessProbe:
          initialDelaySeconds: 60
          httpGet:
            path: /health
            port: http
        readinessProbe:
          httpGet:
            path: /health
            port: http
        resources:
{{ toYaml .Values.web.resources | indent 10 }}
        volumeMounts:
        - name: assets
          mountPath: /opt/mastodon/public/assets
        - name: system
          mountPath: /opt/mastodon/public/system
      volumes:
      - name: system
        persistentVolumeClaim:
          claimName: {{ template "web.fullname" . }}-system
      - name: assets
        persistentVolumeClaim:
          claimName: {{ template "web.fullname" . }}-assets
