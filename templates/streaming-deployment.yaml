apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "streaming.fullname" . }}
  labels:
    app: {{ template "name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: "{{ .Values.streaming.name }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "name" . }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "name" . }}
        component: "streaming"
        release: {{ .Release.Name }}
    spec:
      containers:
      - name: streaming
        image: "{{ .Values.streaming.image }}:{{ .Values.streaming.imageTag }}"
        imagePullPolicy: {{ .Values.streaming.imagePullPolicy | quote }}
        command:
          - npm
          - run
          - start
        envFrom:
          - configMapRef:
              name: {{ include "fullname" . }}-env
          - secretRef:
              name: {{ include "fullname" . }}-web
        env:
          {{- if .Values.externalPostgresql.existingSecret }}
          - name: "DB_PASS"
            valueFrom:
              secretKeyRef:
                key: {{ .Values.externalPostgresql.existingSecretPasswordKey | quote }}
                name: {{ .Values.externalPostgresql.existingSecret | quote }}
          {{- end }}
          {{- if not .Values.redis.enabled }}
          {{- if .Values.externalRedis.existingSecret }}
          - name: "REDIS_URL"
            valueFrom:
              secretKeyRef:
                key: {{ .Values.externalRedis.existingSecretUrlKey | quote }}
                name: {{ .Values.externalRedis.existingSecret | quote }}
          {{- else }}
          - name: "REDIS_URL"
            value: {{ .Values.externalRedis.url | quote }}
          {{- end }}
          {{- end }}
        ports:
        - name: http
          containerPort: {{ .Values.streaming.containerPort }}
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /api/v1/streaming/health
            port: http
        readinessProbe:
          httpGet:
            path: /api/v1/streaming/health
            port: http
        resources:
{{ toYaml .Values.streaming.resources | indent 10 }}
